{"version":3,"sources":["PropTypeShapes.js","fetchRecipeById.js","components/Amount/Amount.js","recipe/IngredientList.js","recipe/SimpleView/SimpleView.js","recipe/RecipeContainer.js","create/Step.js","create/Create.js","RecipeList.js","App.js","serviceWorker.js","index.js"],"names":["TimeUnitTypes","TempUnitTypes","IngredientShape","name","string","isRequired","amount","shape","value","number","units","madeInStep","preparation","TimeShape","lowerBound","upperBound","oneOf","TemperatureShape","StepShape","equipment","arrayOf","temperature","oneOfType","title","description","ingredients","time","priorStepRequired","bool","fetchRecipeById","recipeId","a","fetch","process","then","r","json","it","error","console","Amount","unitAbbreviations","teaspoons","tablespoons","pints","quarts","gallons","milliliters","liters","pounds","ounces","grams","cups","count","celsius","fahrenheit","longform","className","IngredientList","map","index","key","SimpleView","steps","titleImage","style","display","flexWrap","src","maxWidth","alt","flatMap","step","filter","RecipeContainer","useParams","useState","recipe","setRecipe","setSteps","useEffect","data","result","fetchSteps","Object","keys","length","Step","updateStep","onChange","Create","id","source","yield","values","setValues","setSuccessfulSave","setError","handleChange","prop","event","target","stepToUpdate","type","checked","handleSubmit","e","log","method","body","response","catch","onSubmit","required","htmlFor","rows","onClick","concat","RecipeList","search","allRecipes","setAllRecipes","url","URL","href","to","width","height","defaultProps","App","path","exact","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5504264a.chunk.js","sourcesContent":["import {string, number, shape, arrayOf, oneOf, oneOfType, bool} from \"prop-types\";\n\nexport const HeatStringTypes = [\"High\", \"Medium-High\", \"Medium\", \"Medium-Low\", \"Low\"]\nexport const TimeUnitTypes = [\"Seconds\", \"Minutes\", \"Hours\", \"Days\"]\nexport const TempUnitTypes = ['celsius', 'fahrenheit']\n\nexport const IngredientShape = {\n    name: string.isRequired,\n    amount: shape({\n        value: number,\n        units: string\n    }),\n    madeInStep: number,\n    preparation: string\n}\n\nexport const TimeShape = {\n    value: number,\n    lowerBound: number,\n    upperBound: number,\n    units: oneOf(TimeUnitTypes).isRequired\n}\n\nexport const TemperatureShape = {\n        value: number,\n        lowerBound: number,\n        upperBound: number,\n        units: oneOf(TempUnitTypes).isRequired\n    }\n\nexport const StepShape = {\n    equipment: arrayOf(string),\n    temperature: oneOfType([shape(TemperatureShape), oneOf(HeatStringTypes)]),\n    title: string,\n    description: string.isRequired,\n    ingredients: arrayOf(shape(IngredientShape)),\n    time: shape(TimeShape),\n    priorStepRequired: bool,\n}\n\nexport const RecipeShape = {\n    title: string.isRequired,\n    id: string.isRequired,\n    description: string,\n    source: string,\n    yields: string,\n    steps:  arrayOf(shape(StepShape)),\n    titleImage: string\n}\n","\n\nexport const fetchRecipeById = async recipeId =>\n    await fetch(`${process.env.REACT_APP_API_URL}/recipes/${recipeId}`)\n        .then(r => r.json())\n        .then(it => it, error => console.error(error))\n\nexport const fetchSteps = recipeId => fetch(`${process.env.REACT_APP_API_URL}/recipes/${recipeId}/steps`)\n        .then(r => r.json())\n        .then((result => result), error => console.error(error))","import React from 'react';\nimport * as PropTypes from 'prop-types'\nimport './Amount.scss'\n\nexport default function Amount({value, units, longform}){\n  const unitAbbreviations = {\n    teaspoons: 'tsp',\n    tablespoons: 'tbsp',\n    'fluid ounces': 'fl oz',\n    pints: 'pt',\n    quarts: 'qt',\n    gallons: 'gal',\n    milliliters: 'ml',\n    liters:'l',\n    pounds: 'lb',\n    ounces: 'oz',\n    grams: 'g',\n    cups: 'c',\n    count: '',\n    celsius: '° C',\n    fahrenheit: '° F'\n  }\n\n  if(longform){\n    return <span className='amount'>{value} {units}</span>\n  }\n  return <span className='amount'>{value} {typeof unitAbbreviations[units] !== 'undefined' ? unitAbbreviations[units] : units}</span>\n}\n\nAmount.propTypes ={\n  value: PropTypes.number.isRequired,\n  units: PropTypes.string,\n  longform: PropTypes.bool\n}\n","import React from 'react';\nimport * as PropTypes from 'prop-types'\nimport Amount from '../components/Amount/Amount';\nimport './ingredient-list.scss'\n\nconst IngredientList = ({ingredients}) => <ul className='w3-ul w3-border ingredient-list'>\n    {!!ingredients && ingredients.map(({amount, name, madeInStep}, index) =>\n        <li key={index}>\n            {amount && <Amount units={amount.units} value={amount.value}/>}\n            <div className='w3-rest'>{name}{!!madeInStep && <sup>{madeInStep}</sup>}</div>\n        </li>)}\n</ul>\n\nIngredientList.propTypes = {\n    ingredients: PropTypes.arrayOf(PropTypes.shape({\n        amount: PropTypes.shape({\n            value: PropTypes.number,\n            units: PropTypes.string\n        }),\n        name: PropTypes.string.isRequired,\n        madeInStep: PropTypes.number\n    }))\n}\n\nexport default IngredientList\n","import React from \"react\";\nimport IngredientList from \"../IngredientList\";\n\nconst SimpleView = ({title, steps, titleImage}) => {\n    return <div className='w3-container'>\n        <h1>{title}</h1>\n        <div style={{display: \"flex\", flexWrap: \"wrap\"}}>\n            <div className='w3-container'>\n                {titleImage && <img src={titleImage} style={{maxWidth: '300px'}} alt={title}/>}\n                <IngredientList ingredients={steps.flatMap(step => step.ingredients)\n                    .filter(it => typeof it !== 'undefined' && typeof it.madeInStep === 'undefined')}/>\n            </div>\n            <div className='w3-container' style={{maxWidth: '500px'}}>\n                {steps.map((it, index) => <p key={index}>{it}</p>)}\n            </div>\n        </div>\n    </div>\n}\n\nexport default SimpleView\n","import React, {useEffect, useState} from \"react\";\nimport {useParams} from \"react-router-dom\";\nimport {RecipeShape} from \"../PropTypeShapes\";\nimport {shape} from \"prop-types\";\nimport {fetchRecipeById, fetchSteps} from \"../fetchRecipeById\";\nimport SimpleView from \"./SimpleView/SimpleView\";\n\nexport default function RecipeContainer() {\n    const {recipeId} = useParams()\n    const [recipe, setRecipe] = useState({})\n    const [steps, setSteps] = useState([])\n\n    useEffect(() => {\n        fetchRecipeById(recipeId).then(data => setRecipe(data));\n    }, [])\n\n    useEffect(() => {\n        fetchSteps(recipeId).then(it => setSteps(it))\n    }, [])\n\n    return <div>\n        {Object.keys(recipe).length > 0  && steps.length > 0 ? <SimpleView {...recipe} steps={steps}/> : <div>Loading...</div>}\n    </div>\n}\n\nRecipeContainer.propTypes = {\n    recipe: shape(RecipeShape)\n}\n","import React, {useState} from 'react'\nimport {\n    HeatStringTypes,\n    IngredientShape,\n    StepShape,\n    TemperatureShape,\n    TimeShape,\n    TimeUnitTypes\n} from \"../PropTypeShapes\";\nimport Ingredient from \"./Ingredient\";\nimport {arrayOf, bool, func, oneOf, oneOfType, shape, string} from \"prop-types\";\nimport Time from \"./time/Time\";\nimport Temperature from \"./temp/Temperature\";\n\nexport default function Step(\n    {\n        title,\n        description,\n        ingredients,\n        time,\n        priorStepRequired,\n        equipment,\n        temperature,\n        index,\n        updateStep\n    }) {\n    const setStepValue = (field, value) => {\n        updateStep(field)({target: {value: value}})\n    }\n\n    const updateNestedObject = parentField => field => event => {\n        let fakeEvent = {target: {value: {...time}}}\n        fakeEvent.target.value[field] = event.target.value\n        updateStep(parentField)(fakeEvent)\n    }\n\n    const addIngredientHandler = () => {\n        let newIngredients = []\n        if(ingredients){\n            newIngredients.push(ingredients)\n        }\n        newIngredients.push({})\n        updateStep('ingredients')({target: {value: newIngredients}})\n    }\n\n    const updateIngredient = (index, field) => event => {\n        let newIngredients = [...ingredients]\n        newIngredients[index][field] = event.target.value\n        updateStep('ingredients')({target: {value: newIngredients}})\n    }\n\n    return <div>\n        <h2>Step {index + 1}{title && `: ${title}`}</h2>\n        <input value={title} onChange={updateStep('title')}/>\n    </div>\n}\n\nStep.propTypes = {\n    equipment: arrayOf(string),\n    temperature: oneOfType([shape(TemperatureShape), oneOf(HeatStringTypes)]),\n    title: string,\n    description: string,\n    ingredients: arrayOf(shape(IngredientShape)),\n    time: shape(TimeShape),\n    priorStepRequired: bool,\n    updateStep: func\n}\n\n//FIXME should i really set these to empty objects/arrays?\nStep.defaultProps = {\n    priorStepRequired: false,\n}","import React, {useState} from 'react'\nimport Step from './Step'\n\nexport default function Create() {\n\n    const [values, setValues] = useState({\n        title: '',\n        id: '',\n        description: '',\n        steps: [],\n        source: '',\n        yield: '',\n        titleImage: ''\n    });\n    const [successfulSave, setSuccessfulSave] = useState(false)\n    const [error, setError] = useState()\n\n    const handleChange = (prop) => (event) => {\n        setValues({...values, [prop]: event.target.value});\n    };\n\n    const addStep = () => {\n        setValues({...values, steps: values.steps.concat({})});\n    }\n\n    const updateStep = index => prop => event => {\n        let stepToUpdate = values.steps[index]\n        if(event.target.type === 'checkbox'){\n            stepToUpdate[prop] = event.target.checked\n        }else{\n            stepToUpdate[prop] = event.target.value\n        }\n        let steps = values.steps\n        steps[index] = stepToUpdate\n        setValues({...values, steps: steps})\n    }\n\n    const handleSubmit = e => {\n        console.log(values)\n        fetch(`${process.env.REACT_APP_API_URL}/recipes`, {\n            method: 'POST',\n            body: values\n        }).then(response => setSuccessfulSave(true)).catch(e => setError(e))\n    }\n\n    return <div>\n        <h1>Add a Recipe</h1>\n        <form onSubmit={handleSubmit}>\n            <div>\n                <input required value={values.title}\n                           onChange={handleChange('title')}/>\n                <input required value={values.id} onChange={handleChange('id')}/>\n                <input value={values.source} onChange={handleChange('source')}/>\n            </div>\n            <div>\n                    <label htmlFor=\"description\">Description</label>\n                    <textarea\n                        id='description' value={values.description}\n                        onChange={handleChange('description')}  rows={4} />\n            </div>\n            <input value={values.description}\n                       onChange={handleChange('description')}/>\n            <input value={values.titleImage}\n                       onChange={handleChange('titleImage')}/>\n            {values.steps.map((step, index) => <Step updateStep={updateStep(index)} {...step} index={index}\n                                                     key={index}/>)}\n            <button onClick={addStep}>Add Step</button>\n            <button onClick={handleSubmit}>Submit</button>\n        </form>\n    </div>\n}\n","import React, {useEffect, useState} from 'react'\nimport {Link} from \"react-router-dom\";\n\nexport default function RecipeList() {\n    const [search, setSearch] = useState()\n    const [allRecipes, setAllRecipes] = useState([])\n\n    useEffect(() => {\n\n        let url = new URL(`${process.env.REACT_APP_API_URL}/recipes`)\n\n        fetch(url.href)\n            .then(r => r.json())\n            .then((result => {\n                console.log(result)\n                setAllRecipes(result)\n            }), error => {\n                console.log(error)\n            })\n    }, [search])\n\n    return <div>\n            {allRecipes.map(recipe => (\n                <div key={recipe.id} >\n                    <Link to={`/recipes/${recipe.id}`}>\n                    <img src={recipe.titleImage} alt={recipe.title} style={{width: \"100%\", height: \"100%\"}}/>\n                    </Link>\n                    <p>{recipe.title}</p>\n                </div>\n            ))}\n    </div>\n}\n","import React, { useEffect, useState } from 'react'\nimport './App.scss';\nimport recipes from './recipes';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\nimport RecipeContainer from './recipe/RecipeContainer';\nimport Create from './create/Create'\nimport RecipeList from './RecipeList'\n\nfunction App() {\n\n  return (\n      <div className=\"App\">\n        <Router>\n          <Switch>\n            <Route path='/recipes/:recipeId'>\n              <RecipeContainer/>\n            </Route>\n            <Route path='/create'>\n              <Create />\n            </Route>\n            <Route exact path='/recipes'>\n              <RecipeList />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n  );\n}\n\nexport default App;\n\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.ureregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}